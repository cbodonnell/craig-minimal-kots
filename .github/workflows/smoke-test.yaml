name: Smoke Test
on:
  push:
    branches:
      - '*'         # matches every branch that doesn't contain a '/'
      - '*/*'       # matches every branch containing a single '/'
      - '**'        # matches every branch
      - '!main'     # excludes main

jobs:
  define-app-version:
    runs-on: ubuntu-latest
    outputs:
      app-version: ${{ steps.define-app-version.outputs.app-version }}
    steps:
    - uses: actions/checkout@v3
    - name: Define App Version
      id: define-app-version
      shell: bash
      run: echo "app-version=0.0.1-${GITHUB_REF_NAME//[^a-zA-Z0-9]/}.${GITHUB_RUN_ID}${GITHUB_RUN_ATTEMPT}" >> $GITHUB_OUTPUT
    - name: Echo app version
      shell: bash
      run: |
        echo "app version: ${{ steps.define-app-version.outputs.app-version }}"
  
  create-test-release:
    needs: [ define-app-version ]
    runs-on: ubuntu-latest
    outputs:
      license-id: ${{ steps.create-customer.outputs.license-id }}
      license-file: ${{ steps.create-customer.outputs.license-file }}
      customer-id: ${{ steps.create-customer.outputs.customer-id }}
      channel-slug: ${{ steps.create-release.outputs.channel-slug }}
    steps:
    - uses: actions/checkout@v3

    - name: Create release
      id: create-release
      uses: replicatedhq/replicated-actions/create-release@v1.7.1
      with:
        app-slug: craig-minimal-kots
        api-token: ${{ secrets.REPLICATED_API_TOKEN }}
        yaml-dir: manifests
        promote-channel: automated-${{ github.run_id }}
        version: ${{ needs.define-app-version.outputs.app-version }}

    - name: Create customer
      id: create-customer
      uses: replicatedhq/replicated-actions/create-customer@main
      with:
        app-slug: craig-minimal-kots
        api-token: ${{ secrets.REPLICATED_API_TOKEN }}
        customer-name: automated-${{ github.run_id }}
        customer-email: testcustomer@example.com
        license-type: dev
        channel-slug: ${{ steps.create-release.outputs.channel-slug }}
        is-kots-install-enabled: "true"
  
  kots-install:
    strategy:
      fail-fast: false
      matrix:
        cluster: [
          {distribution: kind, version: 1.29.2}
        ]
    runs-on: ubuntu-latest
    needs: [ define-app-version, create-test-release ]
    steps:
      - uses: actions/checkout@v4
      - name: Create Cluster 
        id: create-cluster 
        uses: replicatedhq/compatibility-actions/create-cluster@v1 
        with: 
          api-token: ${{ secrets.REPLICATED_API_TOKEN }} 
          kubernetes-distribution: ${{ matrix.cluster.distribution }} 
          kubernetes-version: ${{ matrix.cluster.version }} 
          cluster-name: ${{ github.ref_name }}-${{ matrix.cluster.distribution }}-${{ matrix.cluster.version }} 
          timeout-minutes: 10
          ttl: 10m
      - name: KOTS Install
        uses: replicatedhq/compatibility-actions/kots-install@9f060ecbc14dac84b83967298aa136a7171d0814
        with: 
          kubeconfig: ${{ steps.create-cluster.outputs.cluster-kubeconfig }} 
          app-slug: craig-minimal-kots/${{ needs.create-test-release.outputs.channel-slug }}
          license-file: ${{ needs.create-test-release.outputs.license-file }}
          config-values: ${{ github.workspace }}/tests/test-config-values.yaml
          app-version-label: ${{ needs.define-app-version.outputs.app-version }}

  cleanup-test-release:
    runs-on: ubuntu-22.04
    needs: [ create-test-release, kots-install ]
    steps:
      - name: Archive Customer
        if: ${{ needs.create-test-release.outputs.customer-id != '' }}
        uses: replicatedhq/replicated-actions/archive-customer@v1.7.1
        with:
          api-token: ${{ secrets.REPLICATED_API_TOKEN }} 
          customer-id: ${{ needs.create-test-release.outputs.customer-id }}

      - name: Archive Channel
        if: ${{ needs.create-test-release.outputs.channel-slug != '' }}
        uses: replicatedhq/replicated-actions/archive-channel@v1.7.1
        with:
          app-slug: craig-minimal-kots
          api-token: ${{ secrets.REPLICATED_API_TOKEN }} 
          channel-slug: ${{ needs.create-test-release.outputs.channel-slug }}
